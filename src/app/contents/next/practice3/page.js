
import Contents from '@/components/contents/Contents'
import Section from '@/components/contents/Section'
import SubSection from '@/components/contents/SubSection'
import Text from '@/components/contents/Text'
import CodeBox from '@/components/contents/CodeBox'
import CodeIn from '@/components/contents/CodeIn'
import LinkIn from '@/components/contents/LinkIn'
import ImageSet from '@/components/contents/ImageSet'

export const data = {
    title: "【Next.js入門#3】layout.jsの使い方",
    tag: ["Next.js"],
    date: ["2024", "10", "30"]
}
export const metadata = {
    title: `${data.title} | きなこの部屋`
}

export default function test() {
    return (
        <>
            <Contents data={data}>
                <Section title="はじめに">
                    <Text>この記事はNext.js入門第2回の記事の続きになります。</Text>
                    <LinkIn link={"next/practice2"} title={"【Next.js入門#2】タグとスタイル"}></LinkIn>
                    <Text>前回までの記事ではNext.jsの基礎を簡単におさえただけでしたが、
                        今回からは実際のwebページ開発を想定して各機能の勉強をしていきます。
                    </Text>
                    <Text>今回の記事ではlayout.jsの使い方についてまとめます。</Text>
                </Section>
                <Section title="layout.jsとは">
                    <Text>webページを作る上で、ページ遷移はアプリケーションの多機能化を行う上で必須になります。</Text>
                    <Text>各ページは独自のコンテンツを当然持ちますが、
                        例えばヘッダーやフッターのように遷移後のすべてのページで共通のパーツも存在するはずです。
                    </Text>
                    <Text>layout.jsはこのような共通のパーツを記述しておくファイルであり、
                        このファイルに記述された内容は全てのページで適用されることになります。
                    </Text>
                </Section>
                <Section title="layout.jsの書き方">
                    <Text>では、実際にlayout.jsでwebページの共通部分の作成を行います。</Text>
                    <Text>layout.jsはNextプロジェクトの{`/src/app`}ディレクトリに生成されています。
                        デフォルトのlayout.jsのうち不必要な箇所を削除したものが以下のコードです。
                    </Text>
                    <CodeBox lang={"javascript"} comment={"/next-sample/src/app/layout.js"}>{`import "./globals.css";
export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}
      </body>
    </html>
  );
}`}</CodeBox>
                    <Text>RootLayoutの関数を見ると、htmlタグとbodyタグの生成が行われていることがわかります。
                        bodyタグの子要素の{`{children}`}の箇所にはpage.jsの内容が入ることになります。
                    </Text>
                    <Text>よって、遷移後の全ページでhtmlタグとbodyタグの生成が行われ、その子要素に各ページのコンテンツが生成されていくことになります。</Text>
                    <Text>RootLayoutの上のmetadata変数はhtmlファイルのメタデータを設定するのに使用します。
                        詳しい記述の仕方は今後紹介していきます。
                    </Text>
                    <Text>また、最初にインポートされているglobal.cssは普通のcssではありますが、
                        デフォルトでリセットcssの役割も兼ねているので、削除はせずに編集する際は追記の形をとることをお勧めします。
                    </Text>
                </Section>
                <Section title="おわりに">
                    <Text>今回の記事はここまでです。次回はNext.jsで重要な概念であるコンポーネントについて解説します。</Text>
                    <LinkIn link={"next/practice4"} title={"【Next.js入門#4】コンポーネントの作成"}></LinkIn>
                </Section>
                {/* <Section title="セクション名">
                    <SubSection>サブセクションタイトル</SubSection>
                    <Text>
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                        <CodeIn>
                            {`console.log`}
                        </CodeIn>
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                    </Text>
                    <LinkIn link={"PythonInstall"} title={"ページのタイトルページのタイトルページのタイトル"}></LinkIn>
                    <CodeBox lang={"javascript"} comment={"コードの例"}>{`console.log("test")`}</CodeBox>
                    <ImageSet alt="テスト画像" height={200} width={200} image={image} />
                </Section> */}
            </Contents>
        </>
    )
}
