
import Contents from '@/components/contents/Contents'
import Section from '@/components/contents/Section'
import SubSection from '@/components/contents/SubSection'
import Text from '@/components/contents/Text'
import CodeBox from '@/components/contents/CodeBox'
import CodeIn from '@/components/contents/CodeIn'
import LinkIn from '@/components/contents/LinkIn'
import ImageSet from '@/components/contents/ImageSet'
import image1 from "./image1.jpg"
import image2 from "./image2.jpg"

export const data = {
    title: "【Next.js入門#4】コンポーネントの作成",
    tag: ["Next.js", "React"],
    date: ["2024", "10", "31"]
}
export const metadata = {
    title: `${data.title} | きなこの部屋`
}

export default function test() {
    return (
        <>
            <Contents data={data}>
                <Section title="はじめに">
                    <Text>この記事はNext.js入門第3回の記事の続きになります。</Text>
                    <LinkIn link={"Next/NextPractice3"} title={"【Next.js入門#3】layout.jsの使い方"}></LinkIn>
                    <Text>今回の記事では、
                        React、Next.jsでのアプリケーション開発で重要な概念となるコンポーネントについて学びます。
                    </Text>
                </Section>
                <Section title="コンポーネントとは">
                    <Text>webページを作成する最も簡単な方法は、そのページの要素全てをhtmlファイルに記述していくことです。
                        しかし、これでは可読性の低下や、要素の使いまわしが出来ない等のデメリットがあります。
                    </Text>
                    <Text>そこで、webページの要素をパーツとして分解し、パーツごとに別ファイルとして作成します。
                        そしてそのファイルをhtmlファイルに読み込むことで各パーツを利用します。
                    </Text>
                    <Text>そうすることで、同一ページあるいは遷移後ページでのパーツの使いまわしや、
                        各パーツの改良・修正が非常に簡単になります。
                        また、パーツごとにcssなどの外部モジュールを独立して利用できるため、
                        外部モジュールの依存関係の問題等も発生しにくく、
                        また全く別のアプリケーションへのパーツの使いまわしも容易に行えます。
                    </Text>
                    <Text>このようなアプリケーションのパーツ、あるいはパーツ化したファイルのことをコンポーネントと呼びます。</Text>
                    <ImageSet alt="コンポーネントの概念" height={500} width={700} image={image1} />
                </Section>
                <Section title="コンポーネントの作成">
                    <Text>では、実際にコンポーネント作成してみます。</Text>
                    <Text>今回は、webページのヘッダーをコンポーネントで作成し、
                        layout.jsにインポートして全てのページでヘッダーが表示されるようにします。</Text>
                    <SubSection>コンポーネントファイルの準備</SubSection>
                    <Text>まず、ヘッダーコンポーネントのファイルを作成します。
                        今回は新たにcomponentとというフォルダを作成し、その中にHeader.jsファイルを作成します。
                    </Text>
                    <Text>componentの記述方法はpage.jsと全く同じであり、export default 関数の返り値の中に出力したいタグ要素を記述していきます。
                    </Text>
                    <Text>css等の外部モジュールも各コンポーネントごとにインポートします。</Text>
                    <CodeBox lang={"javascript"} comment={"/next-sample/src/app/component/Header.js"}>{`import styles from "../page.module.css"
export default function Header() {
    return (
        <>
            <header className={styles.header}>
                <div><a href="#">タイトル</a></div>
            </header>
        </>
    )
}`}</CodeBox>
                    <CodeBox lang={"css"} comment={"/next-sample/src/app/page.module.css"}>{`.header {
  width: 100%;
  height: 100px;
  background-color: aqua;
  font-size: 30px;
  text-align: center;
  align-content: center;
}`}</CodeBox>
                    <SubSection>layout.jsへの適用</SubSection>
                    <Text>作成したコンポーネントをlayout.jsに適用します。</Text>
                    <Text>コンポーネントを利用するためにはコンポーネントファイルを変数としてインポートする必要があります。
                        コンポーネントに指定する変数は1文字目が大文字である必要あります。今回は元ファイルの関数に合わせて
                        Headerでインポートします。
                    </Text>
                    <Text>インポートしたコンポーネントはタグを同じ感覚で使用でき、export default 関数の返り値の中で、
                        任意の箇所で呼び出すことが出来ます。
                    </Text>
                    <CodeBox lang={"javascript"} comment={"/next-sample/src/app/layout.js"}>{`import "./globals.css";
import Header from "./component/Header";
export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <Header></Header>
        {/* または、こちらでも可 */}
        {/* <Header /> */}
        {children}
      </body>
    </html>
  );
}`}</CodeBox>
                    <Text>ブラウザでページを確認するとヘッダーが適用されていることがわかります。</Text>
                    <ImageSet alt="ヘッダー適用後のページ" height={200} width={700} image={image2} />
                </Section>
                <Section title="おわりに">
                    <Text>今回の記事はここまでです。次回はコンポーネント間で値のやり取りが可能になるpropsの概念について解説します。</Text>
                    <LinkIn link={"Next/NextPractice5"} title={"【Next.js入門#5】propsの使い方"}></LinkIn>
                </Section>
                {/* <Section title="セクション名">
                    <SubSection>サブセクションタイトル</SubSection>
                    <Text>
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                        <CodeIn>
                            {`console.log`}
                        </CodeIn>
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                        本文のテキストが本文のテキストで本文のテキストが本文のテキスト
                    </Text>
                    <LinkIn link={"PythonInstall"} title={"ページのタイトルページのタイトルページのタイトル"}></LinkIn>
                    <CodeBox lang={"javascript"} comment={"コードの例"}>{`console.log("test")`}</CodeBox>
                    <ImageSet alt="テスト画像" height={200} width={200} image={image} />
                </Section> */}
            </Contents>
        </>
    )
}
